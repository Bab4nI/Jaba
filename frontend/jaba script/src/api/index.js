// src/api/index.js
import axios from 'axios'
import cache from './cache'

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
const CACHE_SETTINGS = {
  default: 5,
  profile: 30,
  courses: 30,
  modules: 30,
  lessons: 15,
  contents: 10,
  refreshToken: 5 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–∞
}

// –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const LAST_TOKEN_REFRESH_KEY = 'last_token_refresh';

// –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
let lastTokenRefresh = parseInt(localStorage.getItem(LAST_TOKEN_REFRESH_KEY)) || 0;

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
let isRefreshingToken = false;
// –ü–µ–Ω–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
let refreshSubscribers = [];

// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000/api';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∞
const isValidJWT = (token) => {
  if (!token || token === 'undefined' || token === 'null') {
    console.log('‚ùå API.isValidJWT: –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
    return false;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
    if (typeof token !== 'string') {
      console.log(`‚ùå API.isValidJWT: –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: ${typeof token}`);
      return false;
    }
    
    // –¢–æ–∫–µ–Ω JWT –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.log('‚ùå API.isValidJWT: –¢–æ–∫–µ–Ω –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∞—Å—Ç–µ–π');
      return false;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å payload
    const payload = JSON.parse(atob(parts[1]));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    if (payload.exp) {
      const expDate = new Date(payload.exp * 1000);
      const now = new Date();
      
      if (now >= expDate) {
        console.log(`‚ùå API.isValidJWT: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (exp: ${expDate.toISOString()}, now: ${now.toISOString()})`);
        return false;
      }
      
      // –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      const timeToExpiry = Math.round((expDate - now) / 1000 / 60);
      console.log(`‚úÖ API.isValidJWT: –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ ${timeToExpiry} –º–∏–Ω—É—Ç`);
    }
    
    return true;
  } catch (e) {
    console.error('‚ùå API.isValidJWT: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ JWT —Ç–æ–∫–µ–Ω–∞:', e);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–µ–Ω–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ
const onTokenRefreshed = (newToken) => {
  console.log(`üîÑ API: –û–ø–æ–≤–µ—â–∞–µ–º ${refreshSubscribers.length} –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ`);
  refreshSubscribers.forEach(callback => callback(newToken));
  refreshSubscribers = [];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ–Ω–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å
const addRefreshSubscriber = (callback) => {
  console.log('üîÑ API: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
  refreshSubscribers.push(callback);
};

// –°–æ–∑–¥–∞–µ–º axios –∏–Ω—Å—Ç–∞–Ω—Å —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
cache.setupAxiosCaching(api);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access_token')
    
    if (token) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      if (isValidJWT(token)) {
        console.log(`üîÑ API: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É ${config.url}`);
        config.headers['Authorization'] = `Bearer ${token}`;
      } else {
        console.warn(`‚ö†Ô∏è API: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ ${config.url}, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫`);
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç 401 –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      }
    } else {
      console.log(`üîÑ API: –ó–∞–ø—Ä–æ—Å –Ω–∞ ${config.url} –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
    }
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
    if (config.method === 'get') {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ URL
      let cacheTime = CACHE_SETTINGS.default;
      
      if (config.url.includes('/profile')) {
        cacheTime = CACHE_SETTINGS.profile;
      } else if (config.url.includes('/contents')) {
        cacheTime = CACHE_SETTINGS.contents;
      } else if (config.url.includes('/lessons')) {
        cacheTime = CACHE_SETTINGS.lessons;
      } else if (config.url.includes('/modules')) {
        cacheTime = CACHE_SETTINGS.modules;
      } else if (config.url.includes('/courses')) {
        cacheTime = CACHE_SETTINGS.courses;
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      config.cache = {
        maxAge: cacheTime * 60 * 1000 // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      };
    }
    
    return config
  },
  (error) => Promise.reject(error)
)

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 401 –æ—à–∏–±–∫–∏ (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    if (error.response?.status === 401 && !originalRequest._retry) {
      console.log(`üîÑ API: –ü–æ–ª—É—á–µ–Ω 401 –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ ${originalRequest.url}, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω`);
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω
      if (isRefreshingToken) {
        console.log('üîÑ API: –£–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω, –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—Å—è
        return new Promise((resolve) => {
          addRefreshSubscriber((newToken) => {
            console.log(`üîÑ API: –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ ${originalRequest.url} —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º`);
            originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
            resolve(api(originalRequest));
          });
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å refresh —Ç–æ–∫–µ–Ω–∞
      const refreshToken = localStorage.getItem('refresh_token');
      if (!refreshToken) {
        console.log('‚ùå API: Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        clearAuthTokens();
        return Promise.reject(error);
      }
      
      if (!isValidJWT(refreshToken)) {
        console.log('‚ùå API: Refresh token –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
        clearAuthTokens();
        return Promise.reject(error);
      }
      
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const currentTime = Date.now();
      const timeSinceLastRefresh = currentTime - lastTokenRefresh;
      console.log(`üîÑ API: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±—ã–ª–æ ${Math.round(timeSinceLastRefresh / 1000)} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥`);
      
      if (timeSinceLastRefresh < CACHE_SETTINGS.refreshToken * 60 * 1000) {
        // –ï—Å–ª–∏ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        const newToken = localStorage.getItem('access_token');
        if (newToken && isValidJWT(newToken)) {
          console.log(`üîÑ API: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${originalRequest.url}`);
          originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
          return api(originalRequest);
        }
      }

      originalRequest._retry = true;
      isRefreshingToken = true;
      
      try {
        console.log('üîÑ API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
        lastTokenRefresh = Date.now();
        localStorage.setItem(LAST_TOKEN_REFRESH_KEY, lastTokenRefresh.toString());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–∫–µ–Ω–∞
        if (typeof refreshToken !== 'string') {
          console.error(`‚ùå API: Refresh token –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: ${typeof refreshToken}`);
          clearAuthTokens();
          return Promise.reject(new Error('Invalid refresh token type'));
        }
        
        if (refreshToken.length < 20) {
          console.error(`‚ùå API: Refresh token —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: ${refreshToken.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          clearAuthTokens();
          return Promise.reject(new Error('Invalid refresh token length'));
        }
        
        console.log(`üîÑ API: –ò—Å–ø–æ–ª—å–∑—É–µ–º refresh token: ${refreshToken.substring(0, 15)}...`);
        
        const response = await axios.post(
          `${API_BASE_URL}/token/refresh/`,
          { refresh: refreshToken },
          {
            headers: {
              'Content-Type': 'application/json'
            }
          }
        )
        
        if (!response.data || !response.data.access) {
          console.error('‚ùå API: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç, –Ω–æ –±–µ–∑ access —Ç–æ–∫–µ–Ω–∞', response.data);
          throw new Error('No access token in response');
        }
        
        const newAccessToken = response.data.access;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if (typeof newAccessToken !== 'string') {
          console.error(`‚ùå API: –ü–æ–ª—É—á–µ–Ω access token –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞: ${typeof newAccessToken}`);
          throw new Error('Invalid access token type in response');
        }
        
        if (!isValidJWT(newAccessToken)) {
          console.error('‚ùå API: –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π access token');
          throw new Error('Invalid access token in response');
        }
        
        console.log('‚úÖ API: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:', newAccessToken.substring(0, 15) + '...');
        localStorage.setItem('access_token', newAccessToken);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ
        onTokenRefreshed(newAccessToken);
        
        isRefreshingToken = false;
        return api(originalRequest);
      } catch (refreshError) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', refreshError);
        console.log('–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞: refresh token =', refreshToken ? refreshToken.substring(0, 15) + '...' : 'null');
        if (refreshError.response) {
          console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', refreshError.response.status);
          console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', refreshError.response.data);
        }
        clearAuthTokens();
        isRefreshingToken = false;
        return Promise.reject(refreshError);
      }
    }
    return Promise.reject(error);
  }
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const clearAuthTokens = () => {
  console.warn('‚ö†Ô∏è API: –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  localStorage.removeItem('access_token');
  localStorage.removeItem('refresh_token');
  localStorage.removeItem(LAST_TOKEN_REFRESH_KEY);
};

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞
api.invalidateCache = (pattern = null) => {
  if (pattern) {
    // –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ —à–∞–±–ª–æ–Ω—É URL
    const keys = Object.keys(localStorage)
      .filter(key => key.startsWith('api_cache_') && key.includes(pattern));
    
    console.log(`üîÑ API: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ —à–∞–±–ª–æ–Ω—É "${pattern}", –Ω–∞–π–¥–µ–Ω–æ ${keys.length} –∫–ª—é—á–µ–π`);
    keys.forEach(key => localStorage.removeItem(key));
  } else {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Å—å –∫—ç—à
    console.log('üîÑ API: –ü–æ–ª–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞');
    cache.clear();
  }
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª—è
api.invalidateProfileCache = () => {
  console.log('üîÑ API: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª—è');
  api.invalidateCache('/profile');
}

export default api;