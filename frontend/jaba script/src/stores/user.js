// store/user.js
import { defineStore } from 'pinia';
import axios from 'axios';
import { useRefreshStore } from '@/stores/auth';
import cacheUtils from '@/api/cache';
import api from '@/api';

// Cache keys
const PROFILE_CACHE_KEY = 'user_profile_data';
const PROFILE_LAST_FETCH_KEY = 'user_profile_last_fetch';
const PROFILE_CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

// –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö (5 —Å–µ–∫—É–Ω–¥)
const RETRY_DELAY = 5000;
// –§–ª–∞–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let isLoading = false;
// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
let lastAttempt = 0;

export const useUserStore = defineStore('user', {
  state: () => ({
    first_name: '',
    last_name: '',
    middle_name: '',
    email: '',
    newEmail: '',
    group: '',
    avatarBase64: '',
    role: '',
    activeTab: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
    accessToken: localStorage.getItem('access_token') || null,
    lastProfileFetch: parseInt(localStorage.getItem(PROFILE_LAST_FETCH_KEY)) || null,
    profileCacheDuration: PROFILE_CACHE_DURATION,
    department: '',
    level: '',
    course: '',
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    loading: false,
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user: null,
  }),
  getters: {
    isAuthenticated: (state) => !!state.accessToken && !!state.user,
    fullName: (state) => {
      if (state.last_name && state.first_name) {
        return `${state.last_name} ${state.first_name}`;
      }
      return state.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    hasProfile: (state) => !!state.first_name && !!state.last_name
  },
  actions: {
    setAccessToken(accessToken) {
      this.accessToken = accessToken;
    },
    SET_USER_DATA(data) {
      this.first_name = data.first_name;
      this.last_name = data.last_name;
      this.middle_name = data.middle_name;
      this.email = data.email;
      this.group = data.group;
      this.avatarBase64 = data.avatar_base64;
      this.role = data.role;
      this.department = data.department || '';
      this.level = data.level || '';
      this.course = data.course || '';
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.user = data;
      
      // Update cache time
      const now = Date.now();
      this.lastProfileFetch = now;
      localStorage.setItem(PROFILE_LAST_FETCH_KEY, now.toString());
      
      // Cache the profile data
      try {
        localStorage.setItem(PROFILE_CACHE_KEY, JSON.stringify(data));
      } catch (error) {
        console.error('Error caching profile data:', error);
      }
    },
    async fetchUserProfile(force = false) {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const now = Date.now();
      if (isLoading || (!force && now - lastAttempt < RETRY_DELAY)) {
        console.log('‚è≥ –î—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
        return;
      }
      
      isLoading = true;
      lastAttempt = now;
      this.loading = true;
      
      try {
        const token = this.accessToken;
        if (!token) {
          console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞');
          isLoading = false;
          this.loading = false;
          return;
        }

        // Check if we can use cached data
        if (!force && this.lastProfileFetch && (now - this.lastProfileFetch) < this.profileCacheDuration) {
          // Try to load from localStorage if state is empty
          if (!this.first_name || !this.user) {
            try {
              const cachedData = localStorage.getItem(PROFILE_CACHE_KEY);
              if (cachedData) {
                const data = JSON.parse(cachedData);
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ localStorage');
                this.SET_USER_DATA(data);
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
            }
          }
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
          isLoading = false;
          this.loading = false;
          return;
        }

        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios
        // –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        const response = await api.get('/profile/', {
          // Skip cache if force refresh is requested
          skipCache: force
        });
        
        this.SET_USER_DATA(response.data);
        isLoading = false;
        this.loading = false;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
        if (error.response && error.response.status === 401) {
          try {
            const refreshStore = useRefreshStore();
            await refreshStore.refreshToken();

            if (refreshStore.accessToken) {
              this.setAccessToken(refreshStore.accessToken);
              // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
              await this.fetchUserProfile(true);
            }
          } catch (refreshError) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', refreshError);
          }
        }
        isLoading = false;
        this.loading = false;
      }
    },
    async forceFetchProfile() {
      await this.fetchUserProfile(true);
    },
    async updateAvatar(base64) {
      try {
        this.loading = true;
        await api.patch(
          '/profile/',
          { avatar_base64: base64 }
        );

        this.avatarBase64 = base64;
        
        // Update the cache after successful avatar update
        try {
          const cachedData = localStorage.getItem(PROFILE_CACHE_KEY);
          if (cachedData) {
            const data = JSON.parse(cachedData);
            data.avatar_base64 = base64;
            localStorage.setItem(PROFILE_CACHE_KEY, JSON.stringify(data));
          }
          
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API
          api.invalidateProfileCache();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–∞:', error);
        }
        this.loading = false;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        this.loading = false;
      }
    },
    async saveEmail() {
      try {
        this.loading = true;
        await api.patch(
          '/profile/',
          { email: this.newEmail }
        );

        this.email = this.newEmail;
        
        // Update the cache after successful email update
        try {
          const cachedData = localStorage.getItem(PROFILE_CACHE_KEY);
          if (cachedData) {
            const data = JSON.parse(cachedData);
            data.email = this.newEmail;
            localStorage.setItem(PROFILE_CACHE_KEY, JSON.stringify(data));
          }
          
          // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API
          api.invalidateProfileCache();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ email:', error);
        }
        this.loading = false;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email:', error);
        this.loading = false;
      }
    },
    toggleEditEmail() {
      this.isEditingEmail = !this.isEditingEmail;
      if (this.isEditingEmail) {
        this.newEmail = this.email;
      }
      this.emailError = '';
    },
    cancelEdit() {
      this.newEmail = this.email;
    },
    setActiveTab(tab) {
      this.activeTab = tab;
    },
    // Clear user profile cache
    clearProfileCache() {
      localStorage.removeItem(PROFILE_CACHE_KEY);
      localStorage.removeItem(PROFILE_LAST_FETCH_KEY);
      this.lastProfileFetch = null;
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API
      api.invalidateProfileCache();
    },
  },
});
