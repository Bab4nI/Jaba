import { defineStore } from 'pinia';
import axios from 'axios';
import { useUserStore } from '@/stores/user';

// –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const LAST_TOKEN_REFRESH_KEY = 'last_token_refresh';
// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
const MIN_REFRESH_INTERVAL = 5 * 60 * 1000;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∞
const isValidJWT = (token) => {
  if (!token || token === 'undefined' || token === 'null') {
    console.log('‚ùå isValidJWT: –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
    return false;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
    if (typeof token !== 'string') {
      console.log(`‚ùå isValidJWT: –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: ${typeof token}`);
      return false;
    }
    
    // –¢–æ–∫–µ–Ω JWT –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.log('‚ùå isValidJWT: –¢–æ–∫–µ–Ω –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∞—Å—Ç–µ–π');
      return false;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å payload
    const payload = JSON.parse(atob(parts[1]));
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è JWT
    if (!payload || typeof payload !== 'object') {
      console.log('‚ùå isValidJWT: Payload –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    if (payload.exp) {
      const expDate = new Date(payload.exp * 1000);
      const now = new Date();
      
      if (now >= expDate) {
        console.log(`‚ùå isValidJWT: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (exp: ${expDate.toISOString()}, now: ${now.toISOString()})`);
        return false;
      }
      
      console.log(`‚úÖ isValidJWT: –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ ${expDate.toISOString()}`);
    } else {
      console.log('‚ö†Ô∏è isValidJWT: –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç exp, –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è');
    }
    
    return true;
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ JWT —Ç–æ–∫–µ–Ω–∞:', e);
    return false;
  }
};

export const useRefreshStore = defineStore('refresh', {
  state: () => ({
    accessToken: localStorage.getItem('access_token') || null,
    refreshToken: localStorage.getItem('refresh_token') || null,
    isRefreshingToken: false,
    isAuthenticated: !!localStorage.getItem('access_token'),
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    lastTokenRefresh: parseInt(localStorage.getItem(LAST_TOKEN_REFRESH_KEY)) || 0,
  }),

  actions: {
    setAccessToken(accessToken) {
      if (!accessToken) {
        console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–π access token');
        return;
      }
      
      if (typeof accessToken !== 'string') {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å access token –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞: ${typeof accessToken}`);
        return;
      }
      
      this.accessToken = accessToken;
      localStorage.setItem('access_token', accessToken);
      this.isAuthenticated = true;
      console.log(`‚úÖ –ù–æ–≤—ã–π access token —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${accessToken.substring(0, 15)}...`);

      // ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å userStore
      try {
        const userStore = useUserStore();
        userStore.setAccessToken(accessToken);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å userStore:', error);
      }
    },

    setRefreshToken(refreshToken) {
      if (!refreshToken) {
        console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–π refresh token');
        return;
      }
      
      if (typeof refreshToken !== 'string') {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å refresh token –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞: ${typeof refreshToken}`);
        return;
      }
      
      this.refreshToken = refreshToken;
      localStorage.setItem('refresh_token', refreshToken);
      console.log(`‚úÖ –ù–æ–≤—ã–π refresh token —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${refreshToken.substring(0, 15)}...`);
    },

    clearTokens() {
      console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ localStorage');
      this.accessToken = null;
      this.refreshToken = null;
      this.isAuthenticated = false;
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      localStorage.removeItem(LAST_TOKEN_REFRESH_KEY);
      this.lastTokenRefresh = 0;
    },

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    canRefreshToken() {
      const now = Date.now();
      return now - this.lastTokenRefresh > MIN_REFRESH_INTERVAL;
    },

    async refreshToken() {
      // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
      if (this.isRefreshingToken) {
        console.log('‚è≥ –£–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å refresh —Ç–æ–∫–µ–Ω–∞
      if (!this.refreshToken) {
        console.warn('‚ùå Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã');
        this.clearTokens();
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
      if (typeof this.refreshToken !== 'string') {
        console.warn(`‚ùå Refresh token –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: ${typeof this.refreshToken}`);
        this.clearTokens();
        return;
      }
      
      if (!isValidJWT(this.refreshToken)) {
        console.warn('‚ùå Refresh token –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã');
        this.clearTokens();
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (!this.canRefreshToken()) {
        console.log('‚è≥ –¢–æ–∫–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return;
      }

      try {
        this.isRefreshingToken = true;
        const now = Date.now();

        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º refresh token: ${this.refreshToken.substring(0, 15)}...`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        const apiUrl = 'http://localhost:8000/api/token/refresh/';
        
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: ${apiUrl}`);
        
        const response = await axios.post(
          apiUrl, 
          { refresh: this.refreshToken },
          {
            headers: {
              'Content-Type': 'application/json'
            }
          }
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (!response.data) {
          console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
          this.isRefreshingToken = false;
          return;
        }

        if (!response.data.access) {
          console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç, –Ω–æ –±–µ–∑ access —Ç–æ–∫–µ–Ω–∞');
          console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
          this.isRefreshingToken = false;
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if (typeof response.data.access !== 'string') {
          console.warn(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω access token –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞: ${typeof response.data.access}`);
          this.isRefreshingToken = false;
          return;
        }

        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        this.setAccessToken(response.data.access);
        this.lastTokenRefresh = now;
        localStorage.setItem(LAST_TOKEN_REFRESH_KEY, now.toString());
        
        this.isRefreshingToken = false;
        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        console.log('–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞: refresh token =', this.refreshToken ? this.refreshToken.substring(0, 15) + '...' : 'null');
        if (error.response) {
          console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
          console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
        }
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª 400 –∏–ª–∏ 401, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        if (error.response && (error.response.status === 400 || error.response.status === 401)) {
          this.clearTokens();
        }
        this.isRefreshingToken = false;
        return false;
      }
    },

    logout() {
      // Clear the user profile cache when logging out
      try {
        const userStore = useUserStore();
        if (userStore.clearProfileCache) {
          userStore.clearProfileCache();
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      }
      
      this.clearTokens();
    },

    async ready() {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ auth store');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
      if (!this.accessToken || !this.refreshToken) {
        console.log('‚ùå –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ store, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage');
        
        const accessToken = localStorage.getItem('access_token');
        const refreshToken = localStorage.getItem('refresh_token');
        
        if (!accessToken || !refreshToken) {
          console.log('‚ùå –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ localStorage');
          this.clearTokens();
          return false;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ localStorage
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        this.isAuthenticated = true;
        console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
      if (!isValidJWT(this.accessToken)) {
        console.log('‚ùå Access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
        
        // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ refresh token –≤–∞–ª–∏–¥–µ–Ω
        if (isValidJWT(this.refreshToken)) {
          console.log('üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
          const refreshed = await this.refreshToken();
          return refreshed;
        } else {
          this.clearTokens();
          return false;
        }
      }
      
      // –ï—Å–ª–∏ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω—ã –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
      console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return true;
    },
  },
});
